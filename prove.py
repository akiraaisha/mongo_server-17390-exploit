#!/usr/bin/env python3.4

# Pre: a running mongo-orchestration for MongoDB release 3.0

import logging

logging.basicConfig(level=logging.INFO)
logging.getLogger('requests.packages.urllib3.connectionpool').setLevel(logging.WARNING)
log = logging.getLogger(__name__)

import requests
import pymongo
from time import sleep
from hashlib import md5

server_id = "standalone"
port = 27017
username = 'dsch'
http_url = 'http://localhost:%d/' % (port + 1000)

log.info('stop running mongodb server')
r = requests.delete(url='http://localhost:8889/v1/servers/%s' % server_id)

data = {
    "id": server_id,
    "name": "mongod",
    "procParams": {
        "port": port,
        "journal": False,
        "noprealloc": True,
        "nohttpinterface": False
    }
}
log.info('start mongodb server %s', data)
r = requests.post(url='http://localhost:8889/v1/servers', json=data)
server = r.json()

sleep(1) # wait for server to start

log.info('access http interface')
r = requests.get(http_url)
log.info('access http interface status %d headers %s', r.status_code, r.headers)
assert r.status_code == 200

log.info('add MongoDB user %s', username)
client = pymongo.MongoClient(server['mongodb_uri'])
client.admin.add_user(name=username, password='mysecret')
log.info('new user %s', client.admin['system.users'].find_one(user=username))

log.info('access http interface')
r = requests.get(http_url)
log.info('access http interface status %d headers %s', r.status_code, r.headers)
assert r.status_code == 401

method = 'GET'
uri = '/'
realm = 'mongo'
nonce = 'abc'
nonce_count = '00000001'
qop = 'auth'
cnonce = 'YzkzYTI1YjM4OTMxN2VkODg3NjNmY2U5MDkzMmM1MDM='


def hash_values(values):
    return md5(':'.join(values).encode()).hexdigest()


HA1 = ''  # BUG: should be hash_values([username, realm, password])
HA2 = hash_values([method, uri])
response = hash_values([HA1, nonce, nonce_count, cnonce, qop, HA2])
log.info('HA1 %s HA2 %s response %s', HA1, HA2, response)

auth = 'Digest ' + ', '.join([
    'username="%s"' % username,
    'realm="%s"' % realm,
    'nonce="%s"' % nonce,
    'uri="%s"' % uri,
    'cnonce="%s"' % cnonce,
    'nc=%s' % nonce_count,
    'qop=%s' % qop,
    'response="%s"' % response,
    'algorithm="MD5"'
])
r = requests.get(http_url, headers={'Authorization': auth})
log.info('access http interface status %d headers %s', r.status_code, r.headers)
assert r.status_code == 200
# print(r.text)
